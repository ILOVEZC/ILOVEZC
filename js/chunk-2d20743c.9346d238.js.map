{"version":3,"sources":["webpack:///./posts/Webpack的概念与学习.md"],"names":["extractVueFunctions","render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","staticClass","_v","vueFunctions","module","exports","attributes","vue","component","data","templateRender","createElement","created","$options"],"mappings":"iGAAA,SAASA,IACT,IAAIC,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAsBH,EAAII,MAAMC,GAAO,OAAOL,EAAIM,GAAG,IACnGC,EAAkB,CAAC,WAAa,IAAIP,EAAIC,KAASC,EAAGF,EAAIG,eAAmBE,EAAGL,EAAII,MAAMC,IAAIH,EAAG,OAAOG,EAAG,MAAM,CAACG,YAAY,wBAAwB,CAACH,EAAG,KAAK,CAACL,EAAIS,GAAG,oBAAoBT,EAAIS,GAAG,KAAKJ,EAAG,KAAK,CAACA,EAAG,KAAK,CAACA,EAAG,IAAI,CAACL,EAAIS,GAAG,8HAA8HT,EAAIS,GAAG,KAAKJ,EAAG,KAAK,CAACA,EAAG,IAAI,CAACL,EAAIS,GAAG,wDAAwDT,EAAIS,GAAG,KAAKJ,EAAG,KAAK,CAACA,EAAG,IAAI,CAACL,EAAIS,GAAG,gKAAgKT,EAAIS,GAAG,KAAKJ,EAAG,KAAK,CAACA,EAAG,IAAI,CAACL,EAAIS,GAAG,yIAAyIT,EAAIS,GAAG,KAAKJ,EAAG,KAAK,CAACA,EAAG,IAAI,CAACL,EAAIS,GAAG,oMAAoMT,EAAIS,GAAG,KAAKJ,EAAG,IAAI,CAACL,EAAIS,GAAG,WAAWJ,EAAG,SAAS,CAACL,EAAIS,GAAG,yDAAyDT,EAAIS,GAAG,aAEvpC,MAAO,CAAEV,OAAQA,EAAQQ,gBAAiBA,GAE1C,MAAMG,EAAeZ,IAErBa,EAAOC,QAAU,CACXC,WAAY,GAEZC,IAAK,CACHC,UAAW,CACTC,KAAM,WACJ,MAAO,CACLC,eAAgB,OAGpBlB,OAAQ,SAAUmB,GAChB,OAAOjB,KAAKgB,eAAiBhB,KAAKgB,iBAAmBC,EAAc,MAAO,cAE5EC,QAAS,WACPlB,KAAKgB,eAAiBP,EAAaX,OACnCE,KAAKmB,SAASb,gBAAkBG,EAAaH","file":"js/chunk-2d20743c.9346d238.js","sourcesContent":["function extractVueFunctions () {\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"frontmatter-markdown\"},[_c('h1',[_vm._v(\"Webpack 的概念与学习\")]),_vm._v(\" \"),_c('ul',[_c('li',[_c('p',[_vm._v(\"首先 Webpack 是一个模块打包器，也是前端构建工具，其主要功能就是模块打包，本质上是把一切非 Js 文件打包成 js 文件，并且根据模块之间的依赖，将存在依赖关系的文件整合成一块，同时如果存在异步引入的模块会被打包成 chuck。\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"根据 hash 算法，如果存在文件更改，会重算一次 hash 值，推送到服务器上来实现版本更新。\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"在 webpack 里面，最重要的首先有 loader 配置，loader 本质上是函数，接受参数为资源模块(webpack 中很喜欢模块这个观念，将文件抽象成模块)，用来将其他文件转化成 js。比较常见的 loader 例子就有 babel-loader,file-loader,url-loader。\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"另外，Webpack 常见配置也有 plugin，Webpack 本身就是建立在插件身上的，插件是很重要的概念，是功能的扩展。主流插件有 clean-webpack-plugin,copy-wenpack-plugin,webpack-dev-server。\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"在实际开发过程中，我们需要修改代码时，实现自动打包，启动 webpack 时引用参数 --watch 即可。安装 webpack-dev-server 后启动 npx webpack-dev-server，即可挂载 dist 在 8080 端口。如同我们采用 vue-cli 框架开发那样。打包后的代码如果不处理，在控制台将无法定位错误，此时我们需要 sourcemap。\")])])]),_vm._v(\" \"),_c('p',[_vm._v(\"相关复习资料:\"),_c('strong',[_vm._v(\"https://www.jiangruitao.com/webpack/import-require/\")]),_vm._v(\" */\")])])}]\n\nreturn { render: render, staticRenderFns: staticRenderFns }\n}\nconst vueFunctions = extractVueFunctions()\n\nmodule.exports = { \n      attributes: {},\n    \n      vue: {\n        component: {\n          data: function () {\n            return {\n              templateRender: null\n            }\n          },\n          render: function (createElement) {\n            return this.templateRender ? this.templateRender() : createElement(\"div\", \"Rendering\");\n          },\n          created: function () {\n            this.templateRender = vueFunctions.render;\n            this.$options.staticRenderFns = vueFunctions.staticRenderFns;\n          }\n        }\n      },\n     }"],"sourceRoot":""}