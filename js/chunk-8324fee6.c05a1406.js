(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-8324fee6"],{"5e92":function(n,e,t){function r(){var n=function(){var n=this,e=n.$createElement;n._self._c;return n._m(0)},e=[function(){var n=this,e=n.$createElement,r=n._self._c||e;return r("div",{staticClass:"frontmatter-markdown"},[r("h1",[n._v("Nginx")]),n._v(" "),r("h2",[n._v("初心")]),n._v(" "),r("p",[n._v("解决每秒上万条的高并发问题，同时解决前端开发跨域问题")]),n._v(" "),r("h2",[n._v("操作")]),n._v(" "),r("h3",[n._v("启动")]),n._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"hljs language-shell"}},[n._v("nginx\n"),r("span",{pre:!0,attrs:{class:"hljs-meta"}},[n._v("#")]),r("span",{pre:!0,attrs:{class:"bash"}},[n._v(" 以后台进程的形式运行")]),n._v("\nps -ef | grep nginx\n")])]),n._v(" "),r("h3",[n._v("关闭")]),n._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"hljs language-shell"}},[n._v("nginx -s stop\n")])]),n._v(" "),r("h3",[n._v("重启")]),n._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"hljs language-shell"}},[n._v("nginx -s reload\n")])]),n._v(" "),r("h3",[n._v("查看配置信息")]),n._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"hljs language-shell"}},[n._v("nginx -V\n"),r("span",{pre:!0,attrs:{class:"hljs-meta"}},[n._v("#")]),r("span",{pre:!0,attrs:{class:"bash"}},[n._v(" --conf-path就是配置文件")]),n._v("\n")])]),n._v(" "),r("h3",[n._v("windows 查看状态")]),n._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"hljs language-shell"}},[n._v('tasklist /fi "imagename eq nginx.exe"\n')])]),n._v(" "),r("h2",[n._v("master 与 worker")]),n._v(" "),r("p",[n._v("master 管理 worker 进程，接收来自外部的信号，分发给 worker 进程\n"),r("img",{attrs:{src:t("c285"),alt:"alt text"}})]),n._v(" "),r("p",[n._v("在.config 文件中，worker_processes 设置的进程数，每个进程都是一个 worker 进程，我们可以设置为 auto，这样 nginx 可以根据 cpu 的核数来设置进程数")]),n._v(" "),r("h2",[n._v("配置")]),n._v(" "),r("p",[n._v("可以在.config 配置文件最后处放入 servers/*，这样可以将配置文件分开，方便管理")]),n._v(" "),r("ol",[r("li",[r("p",[n._v("worker_connections:每个 worker 进程可以同时处理的最大连接数")])]),n._v(" "),r("li",[r("p",[n._v("设置 upstream backend 实现反向代理")])]),n._v(" "),r("li",[r("p",[n._v("我们一般还会配置重定向，比如将 80 端口重定向到 443 端口")])]),n._v(" "),r("li",[r("p",[n._v("http 转换成 https 需要配置 ssl 证书，还有 config 中的 server 里面 listen 的端口号要改成 443 ssl，让填入证书文件信息")])]),n._v(" "),r("li",[r("p",[n._v("每个 server 块都是一个虚拟主机，可以配置不同页面")])])]),n._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"hljs language-config"}},[n._v("#user  nobody;\nworker_processes  2;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n    # 反向代理+负载均衡\n    upstream background {\n        server 119.23.146.70:3000;\n    }\n    server {\n        listen       80;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n\t\t\tproxy_pass http://localhost:5500;\n\t\t\tproxy_set_header Host $host;\n\t\t\tproxy_set_header X-Real-IP $remote_addr;\n\t\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\t\t\tproxy_set_header X-Forwarded-Proto $scheme;\n            # root   html;\n            # index  index.html index.htm;\n        }\n        location /api {\n        proxy_pass http://background;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n\n    # another virtual host using mix of IP-, name-, and port-based configuration\n\n    # HTTPS server\n    #\n    #server {\n    #    listen       443 ssl;\n    #    server_name  localhost;\n\n    #    ssl_certificate      cert.pem;\n    #    ssl_certificate_key  cert.key;\n\n    #    ssl_session_cache    shared:SSL:1m;\n    #    ssl_session_timeout  5m;\n\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\n    #    ssl_prefer_server_ciphers  on;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n}\n")])]),n._v(" "),r("p",[r("img",{attrs:{src:t("c926"),alt:"alt text"}})]),n._v(" "),r("h2",[n._v("关于作者对 nginx 代理的理解")]),n._v(" "),r("p",[n._v("下面是精彩的自述环节，首先 nginx 就是服务端的活，但是前端开发跨域，或者自己部署前端的时候，难免要解决跨域问题。由 nginx 来帮助我们转发请求，通过在客户端避开浏览器的同源策略，实现跨域请求。同时，通过 nginx 的负载均衡，可以实现高并发的请求，这样就可以解决高并发的问题。我们在本地用 nginx 代理，本质上和部署到服务器后，借助 nginx 代理是一样的。这样我们就可以在本地开发的时候，避免跨域问题，同时也可以模拟高并发的请求，这样就可以在本地开发的时候，更好的模拟线上环境，这样就可以更好的开发项目。")])])}];return{render:n,staticRenderFns:e}}const s=r();n.exports={attributes:{},vue:{component:{data:function(){return{templateRender:null}},render:function(n){return this.templateRender?this.templateRender():n("div","Rendering")},created:function(){this.templateRender=s.render,this.$options.staticRenderFns=s.staticRenderFns}}}}},c285:function(n,e,t){n.exports=t.p+"img/nginx_master.7c2d9037.png"},c926:function(n,e,t){n.exports=t.p+"img/nginx_setting.efec0ade.png"}}]);
//# sourceMappingURL=chunk-8324fee6.c05a1406.js.map