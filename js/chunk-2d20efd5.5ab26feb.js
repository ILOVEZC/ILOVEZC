(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d20efd5"],{b25d:function(t,e){function n(){var t=function(){var t=this,e=t.$createElement;t._self._c;return t._m(0)},e=[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"frontmatter-markdown"},[n("h1",[t._v("Http 的演变与微服务")]),t._v(" "),n("h2",[t._v("Http 的演变")]),t._v(" "),n("h3",[t._v("Http/1.0")]),t._v(" "),n("ol",[n("li",[t._v("规定浏览器和服务器之间保持短连接，浏览器请求每次都需要和服务器建立一个 TCP 链接")]),t._v(" "),n("li",[t._v("规定下一个请求一定要在上一个请求的响应之后才能发送，所以 HTTP/1.0 会存在请求对头阻塞问题")])]),t._v(" "),n("h3",[t._v("Http/1.1")]),t._v(" "),n("ol",[n("li",[t._v("保留长链接，避免每次请求都要重复建立 TCP 连接")]),t._v(" "),n("li",[t._v("管道传输，支持多个请求同时发送，但是响应的顺序和请求的顺序一致，所以还是存在请求对头阻塞问题")])]),t._v(" "),n("h3",[t._v("Http/2.0")]),t._v(" "),n("ol",[n("li",[t._v("在一个 TCP 请求中并发请求并响应，消除了请求对头阻塞问题")]),t._v(" "),n("li",[t._v("服务端可以主动推送资源给客户端")]),t._v(" "),n("li",[t._v("一旦发生丢包，会阻塞所有请求")])]),t._v(" "),n("h3",[t._v("Http/3.0")]),t._v(" "),n("ol",[n("li",[t._v("使用 QUIC 协议，基于 UDP 协议，解决了 TCP 的慢启动问题，解决了丢包问题")])]),t._v(" "),n("h2",[t._v("微服务")]),t._v(" "),n("h3",[t._v("grpc")]),t._v(" "),n("p",[t._v("grpc 是 Google(g 指谷歌)实现的一种微服务架构方式，所谓微服务架构，按我的理解是通过封装得更高级的协议，来进行不同进程服务间的数据交互。比如，我们可以通过起两个不同的进程，然后通过 http 协议调用彼此的服务(类似前后端交互)。但是这是传统的方式，但是开发者通常需要手动编写客户端和服务端代码，包括请求和响应的处理逻辑。而利用 RPC 架构，会有代码生产工具自动生成服务端和客户端代码，附带不同语言间交互时数据类型转换(开发人员无需关注细节)，保证了通信服务的稳定性。grpc 的好处如下:")]),t._v(" "),n("ol",[n("li",[t._v("采用二进制格式进行数据传输，节省带宽")]),t._v(" "),n("li",[t._v("编译时自动处理不同语言的类型")]),t._v(" "),n("li",[t._v("支持多种编程语言，方便地跨语言使用")])]),t._v(" "),n("p",[t._v("proto 是 grpc 的格式文件，用于生成相关语言的微服务架构，如 grpc 生成的 go 微服务文件就以.pd.go 为后缀。")]),t._v(" "),n("p",[t._v("一般来说,grpc 是基于 HTTP/2 协议，可以被 nginx 转发，也有基于其他协议的;最新的技术可以通过在前端引入 grpc 编译后的文件，再通过 grpc-web 转换成 http/2 协议，实现前端调用 grpc 服务。")])])}];return{render:t,staticRenderFns:e}}const v=n();t.exports={attributes:{},vue:{component:{data:function(){return{templateRender:null}},render:function(t){return this.templateRender?this.templateRender():t("div","Rendering")},created:function(){this.templateRender=v.render,this.$options.staticRenderFns=v.staticRenderFns}}}}}}]);
//# sourceMappingURL=chunk-2d20efd5.5ab26feb.js.map