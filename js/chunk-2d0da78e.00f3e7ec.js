(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0da78e"],{"6c6a":function(s,t){function e(){var s=function(){var s=this,t=s.$createElement;s._self._c;return s._m(0)},t=[function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("div",{staticClass:"frontmatter-markdown"},[e("h1",[s._v("如何从 ref 包裹的对象取出深拷贝的 value")]),s._v(" "),e("h2",[s._v("1. 问题")]),s._v(" "),e("p",[s._v("我们在开发过程中，有时候会有这样的需求，我们需要在一个 ref 对象赋值后，对已有值进行复制并进行深拷贝，这样可以取消引用关系，避免对原对象的修改影响到新对象。那么我们该如何取出这个深拷贝的值呢？")]),s._v(" "),e("h2",[s._v("2. 解决方案")]),s._v(" "),e("pre",[e("code",{pre:!0,attrs:{class:"hljs language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//首先构造深拷贝函数")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//深拷贝")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" deep = "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("obj")]),s._v(") =>")]),s._v(" {\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typeof")]),s._v(" obj !== "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'object'")]),s._v(" && obj !== "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(") {\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" obj\n  }\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" res = "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Array")]),s._v(".isArray(obj) ? [] : {}\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" key "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" obj) {\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (obj[key] "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("instanceof")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Date")]),s._v(") {\n      res[key] = "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("Date")]),s._v("(obj[key])\n    } "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" res[key] = deep(obj[key])\n  }\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" res\n}\n")])]),s._v(" "),e("pre",[e("code",{pre:!0,attrs:{class:"hljs language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//创作一个用于示例")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" testData = ref({\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("name")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'test'")]),s._v(",\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("age")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("18")]),s._v(",\n  "),e("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("sex")]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'男'")]),s._v(",\n})\n")])]),s._v(" "),e("pre",[e("code",{pre:!0,attrs:{class:"hljs language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 如何获取ref的完美副本(以及完美解耦)")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" t1 = deep(testData)\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" t2 = deep(testData)\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" newT1 = ref(t1._value)\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" newT2 = ref(t2._value)\ninstance.ctx.$forceUpdate() "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//强制更新视图")]),s._v("\nnewT1.value.age = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("20")]),s._v("\nnewT2.value.age = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("21")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(newT1.value, newT2.value, newT1.value === newT2.value) "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//false")]),s._v("\n")])]),s._v(" "),e("h2",[s._v("3. 总结")]),s._v(" "),e("p",[s._v("如果单纯靠 ref(testData.value)来拷贝是不可取的，这样获得的 ref 对象仍然具有同一份依赖。通过上面方法，我们可以获得一个新的，有自己依赖收集的对象。")]),s._v(" "),e("h1",[s._v("对 toraw 的方法进行调研")]),s._v(" "),e("p",[s._v("toraw 根据 vue 官方说法可以用来将 ref 对象转换为原始对象，但是在实际使用中，我发现同一个 ref 用 raw 转化后的对象指向同一个地址。同时，修改 raw 的值，可以影响到 ref 的值，但是不渲染视图。而修改 ref 的值，既影响视图，也影响该对象的值。")]),s._v(" "),e("pre",[e("code",{pre:!0,attrs:{class:"hljs language-js"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// toRaw获取的ref的对象本质上跟ref的对象是同一个，只是失去响应式特性，如果修改ref.value，视图和值都会改变;而修改toraw的值，视图不变，值改变.对reactive包裹的ref数据同理")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" test = toRaw(testData.value)\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" test2 = toRaw(testData.value)\ntest.age = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("21")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(testData.value, test) "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//21,21，视图不变")]),s._v("\ntestData.value.age = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("20")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(testData.value, test2, test) "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//20,20,20，视图改变")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(testData.value === test2) "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//false")]),s._v("\n")])])])}];return{render:s,staticRenderFns:t}}const a=e();s.exports={attributes:{},vue:{component:{data:function(){return{templateRender:null}},render:function(s){return this.templateRender?this.templateRender():s("div","Rendering")},created:function(){this.templateRender=a.render,this.$options.staticRenderFns=a.staticRenderFns}}}}}}]);
//# sourceMappingURL=chunk-2d0da78e.00f3e7ec.js.map